// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AssemblNavbar component should render a BurgerNavbar and a hidden FlatNavbar with a tiny screenWidth 1`] = `
<div
  className="background-light"
>
  <Uncontrolled(Navbar)
    bsStyle="default"
    className="no-padding"
    fixedTop={true}
    fluid={true}
  >
    <div
      className="nav-bar max-container"
      id="navbar"
    >
      <div
        className="left-part"
      >
         
        <BurgerNavbar
          elements={
            Array [
              <SectionLink
                options={
                  Object {
                    "phase": "thread",
                    "phaseContext": "new",
                    "phaseId": "",
                    "slug": undefined,
                  }
                }
                section={
                  Object {
                    "id": "mysection",
                    "sectionType": "CUSTOM",
                    "title": "My section",
                    "url": "http://www.gnu.org",
                  }
                }
              />,
            ]
          }
          renderUserMenu={[Function]}
        />
        <Logo
          src="http://www.example.com/bar.jpg"
        />
      </div>
      <div
        className="right-part"
      >
        <UserMenu
          loginData={
            Object {
              "local": false,
              "route": "http://www.mycoolsite.com/login",
            }
          }
          remainingWidth={NaN}
        />
      </div>
    </div>
  </Uncontrolled(Navbar)>
</div>
`;

exports[`AssemblNavbar component should render a FlatNavbar with a big screenWidth 1`] = `
<div
  className="background-light"
>
  <Uncontrolled(Navbar)
    bsStyle="default"
    className="no-padding"
    fixedTop={true}
    fluid={true}
  >
    <div
      className="nav-bar max-container"
      id="navbar"
    >
      <div
        className="left-part"
      >
         
        <BurgerNavbar
          elements={
            Array [
              <SectionLink
                options={
                  Object {
                    "phase": "thread",
                    "phaseContext": "new",
                    "phaseId": "",
                    "slug": undefined,
                  }
                }
                section={
                  Object {
                    "id": "mysection",
                    "sectionType": "CUSTOM",
                    "title": "My section",
                    "url": "http://www.gnu.org",
                  }
                }
              />,
            ]
          }
          renderUserMenu={[Function]}
        />
        <Logo
          src="http://www.example.com/bar.jpg"
        />
        <NavigationMenu
          elements={
            Array [
              <SectionLink
                options={
                  Object {
                    "phase": "thread",
                    "phaseContext": "new",
                    "phaseId": "",
                    "slug": undefined,
                  }
                }
                section={
                  Object {
                    "id": "mysection",
                    "sectionType": "CUSTOM",
                    "title": "My section",
                    "url": "http://www.gnu.org",
                  }
                }
              />,
            ]
          }
        />
      </div>
      <div
        className="right-part"
      >
        <UserMenu
          loginData={
            Object {
              "local": false,
              "route": "http://www.mycoolsite.com/login",
            }
          }
          remainingWidth={NaN}
        />
        <Connect(Apollo(Component))
          className="navbar-language"
          setWidth={[Function]}
          size="xs"
        />
      </div>
    </div>
  </Uncontrolled(Navbar)>
</div>
`;

exports[`mapSectionToElement function should return a SectionLink element that matches the snapshot 1`] = `
<SectionLink
  options={
    Object {
      "phase": "fake_phase",
      "slug": "fake_slug",
    }
  }
  section={
    Object {
      "sectionType": "DEBATE",
      "title": "fake_title",
    }
  }
/>
`;
